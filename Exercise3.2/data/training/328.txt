****** OOPS Research Group ******
This is the home page for OOPS Research Group, supervised by Prof._Paul_R.
Wilson. The graduate students in the group are:
    * Stephen_Paul_Carl
    * Ajit_George
    * Mark_S._Johnstone
    * Sheetal_V._Kakkad
    * Scott_F._Kaplan
    * Donovan_Kolbly
    * Michael Neely
    * Zhu_Qing
    * Douglas M. Van Wieren
===============================================================================
***** Research Areas *****
    * Memory hierarchies, especially persistent object stores, distributed
      virtual memories, and caches. We have developed a simple, high-
      performance persistent store for C++, called Texas, which uses pointer
      swizzling_at_page_fault_time to implement large address spaces
      efficiently on stock hardware and operating systems, using standard
      compilers.
    * Basic studies of program behavior and memory allocation, which attempt to
      repair the damage done by three decades of mostly unsound studies of
      memory allocation. (See our extensive allocator_survey and (NEW!)_Mike
      Neely's_masters_thesis.)
    * Automatic storage management, especially real-time, generational and
      distributed. See Wilson's large and small surveys on garbage collection
, and papers on efficiency and locality of garbage collectors. We have recently
developed a hard real-time_garbage_collector (written in C++) which we use with
C++ (via a "smart pointer" interface) and our object-oriented Scheme.
Adaptive_memory_management for virtual memory and file systems, especially
dynamic grouping and compression in log-structured file systems, and
checkpointing for fault tolerance and time-travel debugging.
Implementation of highly extensible and portable programming systems, including
our new object-oriented extended Scheme system, RScheme, which has threads,
sockets, real-time GC, a TK interface, etc. See Donovan_Kolbly's home page for
more info, alpha release source code, etc. Paul Wilson's course_notes_on
Scheme, Scheme interpretation and compilation (in raw ASCII text), and RScheme
are also available via ftp. For a description our integrated macro-processing
algorithm to support extensible languages and open compilers, see (NEW!)
Stephen_Carl's_masters_thesis (Note: this thesis contains references to a
couple of new papers we're writing which aren't available yet, but will be (in
draft form anyway) sometime soon.)
Also online is a draft of most of Paul Wilson's book-in-progress, (NEW!)_An
Introduction_to_Scheme_and_its_Implementation in html format for web browsing.
This contains most (but not all) of the material from the ASCII course notes on
Scheme, in a much improved and expanded presentation. (It's about 300 standard
texinfo pages so far. More material is in the works, including an intro to
object systems and metaobjects.) Besides being a good general introduction to
the Scheme language, Scheme programming, and interpreters and compilers, it
provides a general introduction to things like macros---making it good
background reading for Stephen Carl's masters thesis.
A list_of_our_papers, with brief descriptions, is also available.
More papers, a bibliography on heap management, and the source_code_for_Texas
Persistent_Store are available via anonymous ftp at ftp.cs.utexas.edu:/pub/
garbage. The README file lists all the available material including
subdirectories which contain collected papers from the 1991 and 1993 OOPSLA
Garbage Collection and Memory Management Workshops.
People interested in garbage collection may also be interested in Henry_Baker's
ftp_site, although it's on an overloaded site and may not be accessible (keep
trying). Another site of great interest is Hans_Boehm's which contains several
papers as well as free source code for several garbage collectors used with C,
C++ and other languages.
===============================================================================
     Sheetal_V._Kakkad

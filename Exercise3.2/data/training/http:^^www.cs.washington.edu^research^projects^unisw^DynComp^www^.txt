

****** The UW Dynamic Compilation Project ******
 [http://www.cs.washington.edu/research/projects/unisw/DynComp/www/dot-
green.gif] [http://www.cs.washington.edu/research/projects/unisw/DynComp/www/
back-arrow.gif]

** More Information
                     Dynamic compilation enables optimizations based on the
Our_Dynamic_         values of invariant data computed at run-time. Using the
Compiler             values of these run-time constants, a dynamic compiler can
                     eliminate their memory loads, perform constant propagation
Project_Members      and folding, remove branches they determine, and fully
                     unroll loops they bound. However, the performance benefits
Papers               of the more efficient, dynamically-compiled code are
                     offset by the run-time cost of the dynamic compile. Our
Related_Projects     approach to dynamic compilation strives for both fast
                     dynamic compilation and high-quality dynamically-compiled
                     code: the programmer annotates regions of the programs
                     that should be compiled dynamically; a static, optimizing
                     compiler automatically produces pre-optimized machine-code
UW-Only Sections     templates, using a pair of dataflow analyses that identify
                     which variables will be constant at run-time; and a
Student_Projects     simple, dynamic compiler copies the templates, patching in
                     the computed values of the run-time constants, to produce
Group_Web **         optimized, executable code. Our work targets general-
                     purpose, imperative programming languages, initially C.
                     Initial experiments applying dynamic compilation to C
                     programs have produced speedups ranging from 1.2 to 1.8.
                     We are part of the SPIN_project. Eventually, our system
                     will be used to dynamically compile code in the SPIN
                     kernel, for example the SPIN_event_dispatcher. However, we
                     are also actively exploring other possible applications of
                     dynamic compilation, such as in virtual-machine
                     interpreters.
                     Our prototype_dynamic-compilation_system is described in
                     our PLDI_paper. We are now starting to design and build
                     our second-generation system. We will release more details
                     on it soon.
                     ** [http://www.cs.washington.edu/research/projects/unisw/
                     DynComp/www/dot-green.gif]
                     [http://www.cs.washington.edu/htbin-post/speed/nph-
                     count?width=5&link=http://www.cs.washington.edu/research/
                     projects/unisw/DynComp/www/] Last updated August 6, 1996.
                     grant@cs.washington.edu **


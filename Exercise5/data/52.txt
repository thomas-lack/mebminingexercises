
****** Alpha algorithm ******

From Wikipedia, the free encyclopedia


Jump to: navigation, search

The Î±-algorithm is an algorithm used in process_mining, aimed at
reconstructing causality from a set of sequences of events. It was first put
forward by van_der_Aalst, Weijter and MÄruÅter [1]. Several extensions or
modifications of it have since been presented, which will be listed below.
It constructs P/T_nets with special properties (workflow_nets) from event logs
(as might be collected by an ERP system). Each transition in the net
corresponds to an observed task.
***** Contents *****
    * 1_Short_description
          o 1.1_Definitions_used
    * 2_Description
    * 3_Properties
    * 4_Limitations
    * 5_Extensions
    * 6_References
***** [edit] Short description *****
The algorithm takes a workflow log [W\subseteq T^{*}] as input and results in a
workflow net being constructed.
It does so by examining causal relationships observed between tasks. For
example, one specific task might always precede another specific task in every
execution trace, which would be useful information.
**** [edit] Definitions used ****
    * A workflow trace or execution trace is a string over an alphabet T of
      tasks.
    * A workflow log is a set of workflow traces.
***** [edit] Description *****
Declaratively, the algorithm can be presented as follows. Three sets of tasks
are determined:
    * TW is the set of all tasks which occur in at least one trace
    * TI is the set of all tasks which occur trace-initially
    * TO is the set of all tasks which occur trace-terminally
Basic ordering relations are determined ([\succ_{W}] first, the latter three
can be constructed therefrom)
    * [a \succ_W b] iff b directly precedes a in some trace
    * [a\rightarrow_W b] iff [a\succ_Wb \wedge b\not\succ_Wa]
    * [a\#{}_Wb] iff [a\not\succ_Wb \wedge b\not\succ_Wa]
    * [a\Vert_Wb] iff [a\succ_Wb \wedge b\succ_Wa]
Places are discovered. Each place is identified with a pair of sets of tasks,
in order to keep the number of places low.
    * YW is the set of all pairs (A,B) of maximal sets of tasks such that
          * Neither [A \times A] and [B \times B] contain any members of
            [\succ_W] and
          * [A \times B] is a subset of [\rightarrow_W]
    * PW contains one place p(A,B) for every member of YW, plus the input place
      iW and the output place oW
The flow relation FW is the union of the following:
    * [\{(a,p_{(A,B)}) | (A,B) \in Y_W \wedge a \in A\}]
    * [\{(p_{(A,B)},v) | (A,B) \in Y_W \wedge b \in B\}]
    * [\{(i_W,t) | t\in T_I\}]
    * [\{(t,i_O) | t\in T_O\}]
The result is
    * a petri_net structure Î±(W) = (PW,TW,FW)
    * with one input place iW and one output place oW
    * because every transition of TW is on a FW-path from iW to oW, it is
      indeed a workflow net.

***** [edit] Properties *****
It can be shown [2] that in the case of a complete workflow log generated by a
sound_SWF_net, the net generating it can be reconstructed. Complete means that
its [\succ_W] relation is maximal. It is not required that all possible traces
be present (which would be countably infinite for a net with a loop).
***** [edit] Limitations *****
General workflow nets may contain several types of constructs [3] which the Î±-
algorithm cannot rediscover.
[Wiki_letter_w_cropped.svg] This section requires expansion.
Constructing YW takes exponential time in the number of tasks, since [\succ_W]
is not constrained and arbitrary subsets of TW must be considered.
***** [edit] Extensions *****
[Wiki_letter_w_cropped.svg] This section requires expansion.
for example [4] [5]
***** [edit] References *****
   1. ^ van der Aalst, W M P and Weijter, A J M M and Maruster, L (2003).
      "Workflow Mining: Discovering process models from event logs", IEEE
      Transactions on Knowledge and Data Engineering, vol 16
   2. ^ van der Aalst et al. 2003
   3. ^ A. de Medeiros, A K and van der Aalst, W M P and Weijters, A J M M
      (2003). "Workflow Mining: Current Status and Future Directions". in:
      "volume 2888 of Lecture Notes in Computer Science", Springer-Verlag
   4. ^ A. de Medeiros, A K and van Dongen, B F and van der Aalst, W M P and
      Weijters, A J M M (2004). "Process mining: extending the Î±-algorithm to
      mine short loops"
   5. ^ Wen, L and van der Aalst, W M P and Wang, J and Sun, J (2007). "Mining
      process models with non-free-choice constructs", "Data Mining and
      Knowledge Discovery" vol 15, p. 145--180, Springer-Verlag

Retrieved from "http://en.wikipedia.org/wiki/Alpha_algorithm"

Categories: Data_mining
Hidden categories: Articles_to_be_expanded_from_May_2010 | All_articles_to_be
expanded


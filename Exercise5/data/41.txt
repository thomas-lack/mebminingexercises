
****** In-database processing ******

From Wikipedia, the free encyclopedia


Jump to: navigation, search

In-database processing, sometimes referred to as in-database analytics, refers
to the integration of data analytics into data_warehousing functionality. In-
database processing eliminates the overhead of moving large data sets from the
enterprise data warehouse to a separate analytic software application,
providing significant performance benefits.[1]
In-database processing accelerates data analysis, making it relevant for
applications requiring high-throughput, real-time advanced analytics, including
fraud detection, transaction processing, pricing and margin analysis, usage-
based micro-segmenting, behavioral ad targeting and recommendation engines. In-
database processing is performed and promoted as a feature by many of the major
data warehousing vendors, including Teradata, Netezza, Greenplum and Aster
Data.[2]
In-database processing is one of several technologies focused on improving data
warehousing performance, including parallel_computing, shared_nothing
architectures and massive_parallel_processing. database-embedded calculations
respond to growing demand for high-throughput, operational analytics for needs
such as fraud detection, credit scoring, and risk management. It is an
important step towards improving predictive_analytics capabilities.[3]

***** [edit] References *****
   1. ^ [1] "Adding Competitive Muscle with In-Database Analytics," "Database
      Trends &amp; Applications," May 10, 2010
   2. ^ [2] "In-Database Analytics: A Passing Lane for Complex Analysis,"
      "Intelligent Enterprise," December 15, 2008
   3. ^ [3] "Isn't In-database processing old news yet?," "Blog by Tim Manns
      (Data Mining Blog)," January 8, 2009

v Â· d Â· eDatabase_models
Models          Flat  Â· Hierarchical  Â· Dimensional_model  Â· Network  Â· Relational  Â· Graph  Â· Object-oriented  Â· Entity-attribute-value_model
Other models    Associative  Â· Concept-oriented  Â· Multidimensional  Â· Semantic  Â· Star_schema  Â· XML_database
Implementations Flat_file  Â· Deductive  Â· Document-oriented Â· Object-relational Â· Temporal Â· XML_data_stores  Â· Triplestores
v Â· d Â· eDatabase_management_systems
Database_models Â· Database_normalization Â· Database_storage Â· Distributed_DBMS Â· Federated_database_system Â· Referential_integrity Â· Relational
algebra Â· Relational_calculus Â· Relational_database Â· Relational_DBMS Â· Relational_model Â· Object-relational_database Â· Transaction_processing
Concepts   Database Â· ACID Â· CRUD Â· Null Â· Candidate_key Â· Foreign_key Â· Primary_key Â· Superkey Â· Surrogate_key Â· Armstrong's_axioms
Objects    Relation (Table) Â· View Â· Transaction Â· Log Â· Trigger Â· Index Â· Stored_procedure Â· Cursor Â· Partition
Components Concurrency_control Â· Data_dictionary Â· JDBC Â· ODBC Â· Query_language Â· Query_optimizer Â· Query_plan
Database products: Object-oriented (comparison) Â· Relational (comparison) Â· Document-oriented
v Â· d Â· eSoftware_engineering
Fields       Requirements_analysis â¢ Systems_analysis â¢ Software_design â¢ Computer_programming â¢ Formal_methods â¢ Software_testing â¢ Software_deployment â¢ Software_maintenance
Concepts     Data_modeling â¢ Enterprise_architecture â¢ Functional_specification â¢ Modeling_language â¢ Programming_paradigm â¢ Software â¢ Software_architecture â¢ Software_development
             methodology â¢ Software_development_process â¢ Software_quality â¢ Software_quality_assurance â¢ Software_archaeology â¢ Structured_analysis
Orientations Agile â¢ Aspect-oriented â¢ Object_orientation â¢ Ontology â¢ Service_orientation â¢ SDLC
             Development models Agile â¢ Iterative_model â¢ RUP â¢ Scrum â¢ Spiral_model â¢ Waterfall_model â¢ XP â¢ V-Model â¢ Incremental_model â¢ Prototype_model
Models       Other models       Automotive_SPICE â¢ CMMI â¢ Data_model â¢ Function_model â¢ Information_model â¢ Metamodeling â¢ Object_model â¢ Systems_model â¢ View_model
             Modeling languages IDEF â¢ UML
Software     Kent_Beck â¢ Grady_Booch â¢ Fred_Brooks â¢ Barry_Boehm â¢ Ward_Cunningham â¢ Ole-Johan_Dahl â¢ Tom_DeMarco â¢ Martin_Fowler â¢ C._A._R._Hoare â¢ Watts_Humphrey â¢ Michael_A.
engineers    Jackson â¢ Ivar_Jacobson â¢ Craig_Larman â¢ James_Martin â¢ Bertrand_Meyer â¢ David_Parnas â¢ Winston_W._Royce â¢ Colette_Rolland â¢ James_Rumbaugh â¢ Niklaus_Wirth â¢ Edward
             Yourdon â¢ Victor_Basili
Related      Computer_science â¢ Computer_engineering â¢ Enterprise_engineering â¢ History â¢ Management â¢ Project_management â¢ Quality_management â¢ Software_ergonomics â¢ Systems
fields       engineering
[Stub_icon] This computer science article is a stub. You can help Wikipedia by
            expanding_it.v Â· d Â· e

Retrieved from "http://en.wikipedia.org/wiki/In-database_processing"

Categories: Database_management_systems | Data_mining | Data_modeling |
Database_theory | Distributed_computing_problems | Emerging_technology | Formal
sciences | Project_management | System_administration | Technology_development
| Technology_forecasting | Technology_in_society | Transaction_processing |
Computer_science_stubs


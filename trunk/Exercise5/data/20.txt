
****** GSP Algorithm ******

From Wikipedia, the free encyclopedia


Jump to: navigation, search

 This article has multiple issues. Please help improve_it or discuss these
 issues on the talk_page.
     * It does not cite any references_or_sources. Please help improve it by
       citing reliable_sources. Tagged since May 2007.
     * Very few or no other articles link_to_it. Please help introduce_links to
       this page from other articles_related_to_it. Tagged since May 2010.
GSP Algorithm (Generalized Sequential Pattern algorithm) is an algorithm used
for sequence_mining. The algorithms for solving sequence mining problems are
mostly based on the a_priori (level-wise) algorithm. One way to use the level-
wise paradigm is to first discover all the frequent items in a level-wise
fashion. It simply means counting the occurrences of all singleton elements in
the database. Then, the transactions are filtered by removing the non-frequent
items. At the end of this step, each transaction consists of only the frequent
elements it originally contained. This modified database becomes an input to
the GSP algorithm. This process requires one pass over the whole database.
GSP Algorithm makes multiple database passes. In the first pass, all single
items (1-sequences) are counted. From the frequent items, a set of candidate 2-
sequences are formed, and another pass is made to identify their frequency. The
frequent 2-sequences are used to generate the candidate 3-sequences, and this
process is repeated until no more frequent sequences are found. There are two
main steps in the algorithm.
    * Candidate Generation. Given the set of frequent (k-1)-frequent sequences
      F(k-1), the candidates for the next pass are generated by joining F(k-1)
      with itself. A pruning phase eliminates any sequence, at least one of
      whose subsequences is not frequent.
    * Support Counting. Normally, a hash_treeâbased search is employed for
      efficient support counting. Finally non-maximal frequent sequences are
      removed.
***** [edit] Algorithm *****
F1 = the set of frequent 1-sequence k=2, do while F(k-1)!= Null;
      Generate candidate sets Ck (set of candidate k-sequences);
            For all input sequences s in the database D
                  do
            Increment count of all a in Ck if s supports a
            Fk = {a Ð Ck such that its frequency exceeds the threshold}
                  k= k+1;
            Result = Set of all frequent sequences is the union of all Fks
                  End do
End do
The above algorithm looks like the Apriori_algorithm. One main difference is
however the generation of candidate sets. Let us assume that:
            A â B and A â C
are two frequent 2-sequences. The items involved in these sequences are (A, B)
and (A,C) respectively. The candidate generation in a usual Apriori style would
give (A, B, C) as a 3-itemset, but in the present context we get the following
3-sequences as a result of joining the above 2- sequences
            A â B â C, A â C â B and A â BC
            The candidateâgeneration phase takes this into account. The GSP
            algorithm discovers frequent sequences, allowing for time
            constraints such as maximum gap and minimum gap among the sequence
            elements. Moreover, it supports the notion of a sliding window,
            i.e., of a time interval within which items are observed as
            belonging to the same event, even if they originate from different
            events.
***** [edit] References *****
    * Data_Mining_Techniques_Pujari,_Arun_K._(2001)._Universities_Press.
      ISBN 81-7371-380-4.  (pp. 256-260) at Google_Books

Retrieved from "http://en.wikipedia.org/wiki/GSP_Algorithm"

Categories: Data_mining | Articles_with_example_pseudocode
Hidden categories: Articles_lacking_sources_from_May_2007 | All_articles
lacking_sources | Orphaned_articles_from_May_2010 | All_orphaned_articles


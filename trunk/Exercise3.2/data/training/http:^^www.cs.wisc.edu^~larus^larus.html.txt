===============================================================================
****** James Larus (larus@cs.wisc.edu) ******

Associate Professor of Computer Science
Department_of_Computer_Sciences
University_of_Wisconsin_-_Madison
1210 West Dayton Street
Madison, WI 53706 USA

larus@cs.wisc.edu
Phone: 608-262-9519
Secretary: 265-4892 (Julie Fingerson or Thea Sklenar)
Departmental Office: 262-1204
Fax: 608-262-9777
    * Education
    * Research_Interests
    * Research_Projects
    * Upcomming_Courses
    * Software
    * Recent_Papers
    * Ph.D._Graduates
    * Summary
**** Education: ****
    * Ph.D. University of California, Berkeley, 1989.
    * M.S. University of California, Berkeley, 1982.
    * A.B. Harvard College, 1980.
**** Research Interests: ****
    * Programming_languages and compilers, in particular languages and
      compilers for parallel machines.
    * Design and programming of shared-memory parallel computers.
    * Compiling symbolic languages.
    * Program profiling and tracing.
    * Program executable editing.
**** Research Projects: ****
    * Wisconsin Wind Tunnel(WWT)
    * C** Large-Grain Data Parallel Programming Language
    * Executable Editing Library (EEL)
Courses:
CS367_Data_Structures CS838_Java!
**** Software: ****
    * SPIM
    * QPT
    * EEL
    * WARTS
===============================================================================
***** Recent Papers *****
    *  Efficient_Path_Profiling, Thomas Ball and James Larus,
      To appear: MICRO-29, December 1996.
    * Parallel_Programming_in_C**:_A_Large-Grain_Data-Parallel_Programming
      Language, James Larus, Brad Richards, Guhan Viswanathan,
      in Gregory V. Wilson, ed., Parallel_Programming_Using_C++, MIT Press,
      1996
    * Teapot:_Language_Support_for_Writing_Memory_Coherence_Protocols, Satish
      Chandra, Brad Richards, and James Larus,
      ACM SIGPLAN '96 Programming Language Design and Implementation (PLDI
      '96), May 1996.
    * Instruction_Scheduling_and_Executable_Editing, Eric Schnarr and James R.
      Larus,
      To Appear: Workshop on Compiler Support for System Software (WCSSS),
      February 1996.
    * Efficient_Support_for_Irregular_Applications_on_Distributed-Memory
      Machines, Shubhendu Mukherjee, Shamik Sharma, Mark Hill, James Larus,
      Anne Rogers, and Joel Saltz,
      Fifth ACM SIGPLAN Symposium on Principles and Practice of Parallel
      Programming (PPoPP), July 1995.
    * EEL:_Machine-Independent_Executable_Editing, James Larus and Eric
      Schnarr,
      ACM SIGPLAN '95 Conferences on Programming Languages Design and
      Implementation (PLDI), June 1995.
    * Tempest:_A_Substrate_for_Portable_Parallel_Programs, Mark Hill, James
      Larus, and David Wood,
      COMPCON Spring 95, March 1995.
    * Static Branch Frequency and Program Profile Analysis,Youfeng Wu and James
      Larus,
      27th Annual IEEE/ACM International Symposium on Microarchitecture (MICRO
      27), November 1994.
    * Application-Specific_Protocols_for_User-Level_Shared_Memory, Babak
      Falsafi, Alvin Lebeck, Steven Reinhardt, Ioannis Schoinas, Mark Hill,
      James Larus, Anne Rogers, and David Wood,
      Supercomputing '94, November 1994.
    * Where_is_Time_Spent_in_Message-Passing_and_Shared-Memory_Programs?,
      Satish Chandra, James Larus, and Anne Rogers,
      Sixth International Conference on Architectural Support for Programming
      Languages and Operating Systems (ASPLOS-VI), October 1994.
    * LCM:_System_Support_for_Language_Implementation, James Larus, Brad
      Richards, and Guhan Viswanathan,
      Sixth International Conference on Architectural Support for Programming
      Languages and Operating Systems (ASPLOS-VI), October 1994.
    * Fine-grain_Access_Control_for_Distributed_Shared_Memory, Ioannis
      Schoinas, Babak Falsafi, Alvin Lebeck, Steven Reinhardt, James Larus, and
      David Wood,
      Sixth International Conference on Architectural Support for Programming
      Languages and Operating Systems (ASPLOS-VI), October 1994.
    * Cachier:_A_Tool_for_Automatically_Inserting_CICO_Annotations, Trishul
      Chilimbi and James Larus,
      1994 International Conference on Parallel Programming (ICPP), August
      1994.
    * The_Wisconsin_Wind_Tunnel_Project:_An_Annotated_Bibliography, Mark D.
      Hill, James R. Larus, David A. Wood,
      Unpublished manuscript, revised frequently.
    * Cooperative_Shared_Memory:_Software_and_Hardware_for_Scalable
      Multiprocessors, Mark D. Hill, James R. Larus, Steven K. Reinhardt, David
      A. Wood,
      ACM Transactions on Computer Systems (TOCS), November 1993.
    * Wisconsin_Architectural_Research_Tool_Set_(WARTS), Mark D. Hill, James R.
      Larus, Alvin R. Lebeck, Madhusudhan Talluri, David A. Wood,
      Computer Architecture News (CAN), August 1993.
===============================================================================
***** Ph.D. Graduates *****
    * Brad_Richards, Ph.D. August 1996,Memory Systems for Parallel
      Programming,First employment: Vassar College.
    * Guhan Viswanathan, Ph.D. September 1996,New Techniques for Compiling Data
      Parallel LanguagesFirst employment: Oracle.
    * Lorenz_Huelsbergen, Ph.D. August 1993,Dynamic Language
      Parallelization,First employment: AT&T Bell Labs
      (lorenz@research.att.com).
    * Thomas_Ball, Ph.D. August 1993,The Use of Control-Flow and Control
      Dependence in Software Tools,First employment: AT&T Bell Labs
      (tball@research.att.com).
===============================================================================
***** Research Summary *****
My research focuses on problems in programming computers. As part of the
Wisconsin Wind Tunnel (WWT ) Project, I have helped develop a hybrid (software-
hardware), shared-memory computer architecture that facilitates programming and
compiling for parallel machines. Currently, my students and I are developing
languages, compilers, and tools to demonstrate and exploit the power of user-
level coherence policies.
I'm also interested performance evaluation tools that help programmers
understand and improve their programs' performance. Recently, Tom Ball and I
developed an efficient path profiling algorithm, which provides a more detailed
understanding of control-flow within routines and which has identified new
possibilities for better compilers.
===============================================================================
Last modified: Fri Nov 1 21:17:09 1996 by James Larus
     larus@cs.wisc.edu
